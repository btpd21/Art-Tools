diff --git a/index.html b/index.html
--- a/index.html
+++ b/index.html
@@ -1,7 +1,7 @@
 <!DOCTYPE html>
 <html lang="en">
 <head>
-  <meta charset="utf-8" />
-  <title>Botanical Collage Layer Generator</title>
+  <meta charset="utf-8" />
+  <title>Collage Tool</title>
   <meta name="viewport" content="width=device-width, initial-scale=1" />
   <meta name="color-scheme" content="light dark" />
   <link rel="stylesheet" href="app.css" />
@@ -12,7 +12,7 @@
   <a class="skip" href="#main">Skip to canvas</a>
 
-  <header class="ribbon" id="ribbon" role="banner" data-mode="show" data-locked="false">
+  <header class="ribbon" id="ribbon" role="banner" data-mode="show" data-locked="false">
     <div class="ribbon-row">
       <div class="ribbon-left" role="toolbar" aria-label="Collage actions">
         <button class="btn primary" data-action="generate" title="Generate (G)">Generate</button>
         <button class="btn" data-action="shuffle" title="Shuffle (S)">Shuffle</button>
         <button class="btn" data-action="export" title="Export PNG (E)">Export</button>
         <button class="btn" data-action="exportJSON" title="Export JSON">Export JSON</button>
         <button class="btn" data-action="batch" title="Batch x10 (B)">Batch x10</button>
         <div class="divider" aria-hidden="true"></div>
         <div class="status" id="status" role="status" aria-live="polite">idle</div>
       </div>
       <div class="ribbon-right">
         <span class="badge lock-badge" id="ribbonLockBadge" aria-hidden="true">Locked</span>
         <div class="dropdown">
           <button id="ribbonMenuBtn" aria-haspopup="true" aria-expanded="false" aria-controls="ribbonMenu">Ribbon â–¾</button>
           <div id="ribbonMenu" class="menu" role="menu" aria-labelledby="ribbonMenuBtn">
             <button role="menuitemradio" data-mode="show" aria-checked="true">Show</button>
             <button role="menuitemradio" data-mode="auto" aria-checked="false">Auto-hide</button>
             <button role="menuitemradio" data-mode="compact" aria-checked="false">Compact</button>
             <hr />
             <button role="menuitemcheckbox" id="lockToggle" aria-checked="false">Lock ribbon</button>
             <hr />
             <button id="toggleContrast" role="menuitemcheckbox" aria-checked="false">High contrast</button>
             <button id="toggleMotion" role="menuitemcheckbox" aria-checked="false">Reduced motion</button>
           </div>
         </div>
       </div>
     </div>
   </header>
@@ -30,7 +30,7 @@
     <nav class="sidebar" aria-label="Parameters">
       <h2 class="title">Settings</h2>
 
       <fieldset class="group">
         <legend>Photos</legend>
         <input id="file" type="file" accept="image/*" multiple />
         <p class="hint">Drop or choose images. Processing stays on your device.</p>
         <div class="images" id="images"></div>
       </fieldset>
@@ -208,7 +208,7 @@
   <script src="app.js"></script>
   <script src="collage.js"></script>
   <script>
     // Register service worker if present
     if ('serviceWorker' in navigator) {
       navigator.serviceWorker.register('sw.js').catch(()=>{});
     }
   </script>
 </body>
 </html>
 
diff --git a/app.js b/app.js
--- a/app.js
+++ b/app.js
@@ -1,6 +1,183 @@
 // UI wiring, ribbon modes, image loading, render/export, and batch.
 // Requires collage.js for generateCollage().
+/* ==== Enhanced controls: dual inputs + sensitivity curves for ALL sliders ==== */
+
+// Control map: every slider in index.html with generous numeric ranges and tuned curves
+// Curve helpers boost mid-range sensitivity; numbers can push beyond slider bounds.
+const CONTROL_MAP = {
+  // Negative space & limits
+  negSpace:   { numMin: 0,   numMax: 95,  curve: v => curveExpo(v, 10, 70, 0.62) },
+  maxElem:    { numMin: 1,   numMax: 60,  curve: v => curveExpo(v, 5, 30, 0.55) },
+
+  // Tiles
+  tileCount:  { numMin: 10,  numMax: 240, curve: v => curveExpo(v, 42, 96, 0.48), integer: true },
+  specialPct: { numMin: 0,   numMax: 100, curve: v => curveExpo(v, 10, 60, 0.55) },
+  sizeMean:   { numMin: 0.5, numMax: 20,  curve: v => curveExpo(v, 1, 6, 0.55) },
+  sizeSpread: { numMin: 0.5, numMax: 30,  curve: v => curveExpo(v, 1, 8, 0.50) },
+  rotRange:   { numMin: 0,   numMax: 180, curve: v => curveExpo(v, 5, 75, 0.40) },
+  skewRange:  { numMin: 0,   numMax: 80,  curve: v => curveExpo(v, 0, 20, 0.42) },
+  scissorJag: { numMin: 0,   numMax: 200, curve: v => curveExpo(v, 0, 100, 0.60) },
+  tornRough:  { numMin: 0,   numMax: 200, curve: v => curveExpo(v, 0, 100, 0.60) },
+
+  // Strips
+  stripCount:   { numMin: 0,  numMax: 60,  curve: v => curveExpo(v, 0, 20, 0.52), integer: true },
+  stripThick:   { numMin: 0.2,numMax: 40,  curve: v => curveExpo(v, 1, 15, 0.50) },
+  stripOpacity: { numMin: 10, numMax: 100, curve: v => curveExpo(v, 76, 100, 0.70) },
+  angleMin:     { numMin: 0,  numMax: 60,  curve: v => curveExpo(v, 10, 30, 0.55) },
+
+  // Clusters
+  clusterCount:   { numMin: 0,  numMax: 20, curve: v => curveExpo(v, 0, 9, 0.55), integer: true },
+  clusterTiles:   { numMin: 1,  numMax: 40, curve: v => curveExpo(v, 5, 17, 0.55), integer: true },
+  clusterOpacity: { numMin: 10, numMax: 100,curve: v => curveExpo(v, 76, 100, 0.70) },
+
+  // Easter eggs
+  eggCount: { numMin: 0,   numMax: 30, curve: v => curveExpo(v, 0, 7, 0.55), integer: true },
+  eggSize:  { numMin: 0.05,numMax: 10, curve: v => curveExpo(v, 0.2, 3, 0.48), stepHint: 0.1 },
+};
+
+// Exponential-ish curve that boosts low/mid sensitivity.
+// Input v in [a,b]; k in (0,1). Smaller k = stronger boost.
+function curveExpo(v, a, b, k) {
+  const t = (v - a) / (b - a);
+  const t2 = Math.pow(Math.max(0, Math.min(1, t)), k);
+  return a + t2 * (b - a);
+}
+
+// Adds number inputs next to sliders, stronger curves, and Shift-drag fine control.
+function enhanceSliders() {
+  Object.keys(CONTROL_MAP).forEach(id => {
+    const slider = $(id);
+    if (!slider || slider.tagName !== 'INPUT' || slider.type !== 'range') return;
+    if (slider.__enhanced) return;
+
+    const cfg = CONTROL_MAP[id];
+    const wrapper = slider.closest('.param') || slider.parentElement;
+
+    // Create number input
+    const num = document.createElement('input');
+    num.type = 'number';
+    num.className = 'paired-number';
+    num.style.marginLeft = '8px';
+    num.style.width = '84px';
+    const sliderStep = slider.step && slider.step !== '' ? parseFloat(slider.step) : 1;
+    const numStep = cfg.stepHint || sliderStep || 1;
+    num.step = String(numStep);
+
+    // Allow numbers to exceed slider bounds
+    const sMin = slider.min !== '' ? +slider.min : 0;
+    const sMax = slider.max !== '' ? +slider.max : 100;
+    num.min = (cfg.numMin != null ? cfg.numMin : sMin).toString();
+    num.max = (cfg.numMax != null ? cfg.numMax : Math.max(sMax, sMin)).toString();
+    num.value = slider.value;
+
+    wrapper.appendChild(num);
+
+    const format = (x) => {
+      if (cfg.integer) return String(Math.round(x));
+      const stepStr = String(num.step);
+      const dp = stepStr.includes('.') ? (stepStr.split('.')[1].length) : 0;
+      return String(Number(x).toFixed(dp));
+    };
+
+    const syncFromSlider = (trigger=true) => {
+      const raw = +slider.value;
+      const curved = cfg.curve ? cfg.curve(raw) : raw;
+      num.value = format(curved);
+      if (trigger) requestRenderSoon();
+    };
+    const syncFromNumber = (trigger=true) => {
+      let v = +num.value;
+      if (cfg.integer) v = Math.round(v);
+      // Keep the slider within its visual span so UI feels stable
+      if (v < +slider.min) slider.value = String(slider.min);
+      else if (v > +slider.max) slider.value = String(slider.max);
+      else slider.value = String(v);
+      if (trigger) requestRenderSoon();
+    };
+
+    // Default change
+    slider.addEventListener('input', () => syncFromSlider(true));
+    // Shift-drag for fine control
+    slider.addEventListener('pointerdown', (e) => {
+      if (!e.isPrimary) return;
+      const baseStep = sliderStep || 1;
+      const fineStep = baseStep * 0.1;
+      let lastX = e.clientX;
+      let val = +slider.value;
+      const onMove = (ev) => {
+        const dx = ev.clientX - lastX;
+        lastX = ev.clientX;
+        const useFine = ev.shiftKey;
+        const delta = (dx / 4) * (useFine ? fineStep : baseStep);
+        val = clamp(val + delta, +slider.min, +slider.max);
+        if (cfg.integer) val = Math.round(val);
+        slider.value = String(val);
+        syncFromSlider(true);
+      };
+      const off = () => {
+        window.removeEventListener('pointermove', onMove);
+        window.removeEventListener('pointerup', off);
+      };
+      window.addEventListener('pointermove', onMove);
+      window.addEventListener('pointerup', off);
+    });
+
+    num.addEventListener('change', () => syncFromNumber(true));
+    num.addEventListener('input', () => {/* avoid render spam while typing */});
+
+    // Initialize number view
+    syncFromSlider(false);
+
+    slider.__enhanced = { num, cfg, syncFromSlider, syncFromNumber };
+  });
+}
+
+// Compute effective param from enhanced controls (prefers curved numeric)
+function readEnhanced(id, fallback) {
+  const el = $(id);
+  if (!el) return fallback;
+  const enh = el.__enhanced;
+  if (!enh) return +el.value;
+  return +enh.num.value;
+}
+
+// Debounced render requests to keep UI smooth during scrubbing/typing
+let __renderTimer = null;
+function requestRenderSoon(ms = 60) {
+  clearTimeout(__renderTimer);
+  __renderTimer = setTimeout(() => run(false), ms);
+}
@@ -96,6 +273,8 @@
   $('file').addEventListener('change', onFiles);
   qa('[data-action]').forEach(btn => btn.addEventListener('click', onAction));
+  // Build enhanced slider+number controls for all mapped sliders
+  enhanceSliders();
   // Keyboard shortcuts
   window.addEventListener('keydown', (e) => {
     if (e.target && ['INPUT', 'TEXTAREA', 'SELECT'].includes(e.target.tagName)) return;
     if (e.key.toLowerCase() === 'g') { run(false); }
     if (e.key.toLowerCase() === 's') { run(true); }
     if (e.key.toLowerCase() === 'e') { exportPNG(); }
     if (e.key.toLowerCase() === 'b') { batchExport(10); }
   });
@@ -168,6 +345,7 @@
   if (a === 'batch') batchExport(10);
 }
+// requestRenderSoon defined above
@@ -179,35 +357,35 @@
   const W = +$('w').value, H = +$('h').value;
   const seedIn = $('seed').value ? +$('seed').value : null;
   if (shuffleSeed || seedIn === null) rngSeed = Math.floor(Math.random() * 1e9);
   else rngSeed = seedIn;
   return {
     width: W, height: H, seed: rngSeed,
     dpiLabel: $('dpiLabel').value || '',
-    negativeSpacePct: +$('negSpace').value,
-    maxElementPct: +$('maxElem').value,
+    negativeSpacePct: readEnhanced('negSpace'),
+    maxElementPct: readEnhanced('maxElem'),
     tiles: {
-      count: +$('tileCount').value,
-      specialPct: +$('specialPct').value,
-      sizeMeanPct: +$('sizeMean').value,
-      sizeSpreadPct: +$('sizeSpread').value,
-      rotRangeDeg: +$('rotRange').value,
-      skewRangeDeg: +$('skewRange').value,
+      count: readEnhanced('tileCount'),
+      specialPct: readEnhanced('specialPct'),
+      sizeMeanPct: readEnhanced('sizeMean'),
+      sizeSpreadPct: readEnhanced('sizeSpread'),
+      rotRangeDeg: readEnhanced('rotRange'),
+      skewRangeDeg: readEnhanced('skewRange'),
       allow: {
         rect: $('allowRect').checked,
         scissor: $('allowScissor').checked,
         torn: $('allowTorn').checked,
       },
-      scissorJag: +$('scissorJag').value,
-      tornRough: +$('tornRough').value,
+      scissorJag: readEnhanced('scissorJag'),
+      tornRough: readEnhanced('tornRough'),
     },
     strips: {
-      count: +$('stripCount').value,
-      thicknessPct: +$('stripThick').value,
-      opacityPct: +$('stripOpacity').value,
-      angleMin: +$('angleMin').value,
+      count: readEnhanced('stripCount'),
+      thicknessPct: readEnhanced('stripThick'),
+      opacityPct: readEnhanced('stripOpacity'),
+      angleMin: readEnhanced('angleMin'),
     },
     clusters: {
-      count: +$('clusterCount').value,
-      tilesPer: +$('clusterTiles').value,
-      opacityPct: +$('clusterOpacity').value,
+      count: readEnhanced('clusterCount'),
+      tilesPer: readEnhanced('clusterTiles'),
+      opacityPct: readEnhanced('clusterOpacity'),
     },
     eggs: {
-      count: +$('eggCount').value,
-      maxSizePct: +$('eggSize').value,
+      count: readEnhanced('eggCount'),
+      maxSizePct: readEnhanced('eggSize'),
     }
   };
 }
@@ -338,3 +516,7 @@
 function sanitizeFilename(name) {
   return name.replace(/[^\w\-\.]+/g, '_').slice(0, 80);
 }
+
+// -- Style for enhanced slider number input
+
+
diff --git a/app.css b/app.css
--- a/app.css
+++ b/app.css
@@ -1,6 +1,12 @@
+/* Enhanced slider number input */
+.paired-number {
+  width: 84px;
+  margin-left: 8px;
+  font-size: 14px;
+}
